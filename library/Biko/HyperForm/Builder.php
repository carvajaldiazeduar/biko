<?php

namespace Biko\HyperForm;

use Phalcon\Mvc\User\Component;
use Phalcon\Forms\Element\Select;

use Biko\Models\Revisions;
use Biko\Models\Records;

class Builder extends Component
{
	private $form;

	private $config;

	private $page;

	private $record;

	private $revisions;

	/**
	 * @param Phalcon\Forms\Form $form
	 * @param array $config
	 */
	public function __construct($form, $config, $page, $record, $revisions)
	{
		$this->form      = $form;
		$this->config    = $config;
		$this->page      = $page;
		$this->record    = $record;
		$this->revisions = $revisions;
	}

	/**
	 * This view allows a user to filter records according to enabled fields
	 */
	public function searchForm()
	{
		echo $this->view->getContent();

		echo '<div class="toolbar">';

		/** Create button */
		echo '<div class="pull-right">';
		echo $this->tag->linkTo(array(
			array('for' => 'hyperform-create'),
			"<span class='glyphicon glyphicon-plus'></span> Add " . $this->config['single'],
			"class" => "btn btn-primary btn-sm"
		));
		echo '</div>';

		/** Import button */
		if (!isset($this->config['disableImport'])) {
			echo '<div align="right" class="pull-right">';
			echo $this->tag->linkTo(array(
				$this->config['controller'] . "/import",
				"<span class='glyphicon glyphicon-import'></span> Import",
				"class" => "btn btn-primary btn-sm"
			));
			echo '</div>';
		}

		echo '</div>';

		echo '<div class="well">';

		echo '<fieldset><legend>Search ' . $this->config['plural'] . '</legend>';

		echo '<form method="post" action="', $this->url->get(array('for' => 'hyperform-search')), '" autocomplete="off">';

		echo '<div class="row">';
		foreach ($this->form->getElements() as $element) {

			/** Only elements with attribute 'searcheable' are shown */
			if ($element->getUserOption('searcheable')) {
				echo '<div class="form-group col-md-12">
					<label class="control-label" for="',  $element->getName(), '">' . $element->getLabel() . '</label>
					', $element->render(array('class' => 'form-control'));
				echo '</div>';
			}

		}
		echo '</div>';

		echo '<div class="row" align="right">
			<div class="form-group col-md-12">
				<label class="control-label" for="reportType">Output</label> ' . $this->tag->select(array("reportType", array(
					"S" => "Screen",
					"H" => "HTML",
					"E" => "Excel",
					"D" => "PDF"
				))) . '
			</div>
		</div>';

		echo '<div class="row">
			<div class="form-group col-md-12">
				', $this->tag->submitButton(array("Search", "class" => "btn btn-primary")),
			'</div>
		</div>';

		echo '</form></fieldset>';

		echo '</div>';
	}

	public function browseForm()
	{
		/* Show messages generated by the flash component */
		echo $this->view->getContent();

		echo '<div class="row toolbar">';

			/* "Back" button */
			echo '<div class="col-md-6">';
				echo $this->tag->linkTo(array(
					$this->config['controller'],
					"&larr; Go Back",
					"class" => "btn btn-sm btn-default"
				));
			echo '</div>';

			/* Create button */
			echo '<div class="col-md-6" align="right">';
				echo $this->tag->linkTo(array(
					array('for' => 'hyperform-create'),
					"<i class='glyphicon glyphicon-plus'></i> Add " . $this->config['single'],
					"class" => "btn btn-primary btn-sm"
				));
			echo '</div>';

		echo '</div>';

		echo '<table class="table table-bordered table-striped" align="center">
		<thead>
			<tr>';
			$number = 0;
			foreach ($this->form->getElements() as $element) {
				if ($element->getUserOption('browseable')) {
					echo '<th>' . $element->getLabel() . '</th>';
					$number++;
				}
			}
			echo '</tr>
		</thead>
		<tbody>';

		foreach ($this->page->items as $record) {

			echo '<tr class="browse-row">';
			foreach ($this->form->getElements() as $element) {

				/* Only elements market as browseable are used */
				if ($element->getUserOption('browseable')) {

					/* Check if there is a method called "get{ElementName}Detail" */
					$method = 'get' . $element->getName() . 'Detail';
					if (method_exists($record, $method)) {
						echo '<td>' . $record->$method() . '</td>';
					} else {

						/* Check if we have a relation */
						$relation = $element->getUserOption('relation');
						if ($relation) {
							$relationRecord = $record->$relation;
							if ($relationRecord) {
								echo '<td>' . $relationRecord->name . '</td>';
							} else {
								echo '<td>?</td>';
							}
						} else {

							/* Use the value as usual */
							$value = $record->readAttribute($element->getName());
							echo '<td>' . $value . '</td>';
						}
					}
				}

			}

			$primaryKey = $record->readAttribute($this->config['primaryKey']);

			/* Edit button */
			echo '<td width="5%">', $this->tag->linkTo(array(
				array('for' => 'hyperform-edit', 'primary-key' => $primaryKey),
				'<span class="glyphicon glyphicon-pencil"></span>',
				"class" => "btn btn-sm btn-default",
				"title" => "Edit"
			)) . '</td>';

			/* Delete button */
			echo '<td width="5%">
				<a onclick="removeRecord(' . $primaryKey . '); return false;" href="#" class="btn btn-sm btn-default" "title="Delete">
					<span class="glyphicon glyphicon-remove"></span>
				</a>
			</td>';

			/* Revisions button */
			echo '<td width="5%">', $this->tag->linkTo(array(
				$this->config['controller'] . "/rcs/" . $primaryKey,
				'<span class="glyphicon glyphicon-book"></span>',
				"class" => "btn btn-sm btn-default",
				"title" => "Revisions"
			)) . '</td>';
			echo '</tr>';

		}
		echo '</tbody>';

		echo '<tbody>
			<tr>
				<td colspan="', ($number + 3), '" align="left">
					<table width="100%" class="paginator">
						<tr>
							<td align="left" width="50%">
								<div class="btn-group">
									', $this->tag->linkTo(array($this->config['controller'] . "/search",                             '<i class="glyphicon glyphicon-fast-backward"></i>', "class" => "btn btn-default btn-sm")) . '
									', $this->tag->linkTo(array($this->config['controller'] . "/search?page=" . $this->page->before, '<i class="glyphicon glyphicon-step-backward"></i>', "class" => "btn btn-default btn-sm")) . '
									', $this->tag->linkTo(array($this->config['controller'] . "/search?page=" . $this->page->next,   '<i class="glyphicon glyphicon-step-forward"></i>',  "class" => "btn btn-default btn-sm")) . '
									', $this->tag->linkTo(array($this->config['controller'] . "/search?page=" . $this->page->last,   '<i class="glyphicon glyphicon-fast-forward"></i>',  "class" => "btn btn-default btn-sm")) . '
								</div>
							</td>
							<td align="right" width="50%">
								<span class="help-inline">', $this->page->current, '/', $this->page->total_pages, ' Total: ', $this->page->total_items, '</span>
							</td>
						</tr>
					</table>
				</td>
			</tr>
		<tbody>';

		echo '</table>';

		echo '<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
			  <div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h4 class="modal-title">Permanent Removal</h4>
			  </div>
			  <div class="modal-body">
				<p>Are you sure want to delete this ' . $this->config['single'] . '?</p>
			  </div>
			  <div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Forget it</button>
				<button type="button" class="btn btn-danger" onclick="window.location = \'' . $this->url->get($this->config['controller'] . "/delete/") . '\' + window.tempId">Delete</button>
			  </div>
			</div><!-- /.modal-content -->
		  </div><!-- /.modal-dialog -->
		</div><!-- /.modal -->';

		/* Move this to a separate file */
		echo '<script type="text/javascript">function removeRecord(id) { window.tempId = id; $("#myModal").modal("show"); }</script>';
	}

	public function createForm()
	{

		echo '<form method="post" autocomplete="off" enctype="multipart/form-data">';
		echo $this->view->getContent();

		echo '<ul class="pager toolbar">';
			echo '<li class="previous pull-left">';
				echo $this->tag->linkTo(array(
					array('for' => 'hyperform-search'),
					"&larr; Go Back",
					"class" => "btn btn-sm btn-default"
				));
			echo '</li>';
			echo '<li class="pull-right">';
				echo $this->tag->submitButton(array(
					"Add",
					"class" => "btn btn-sm btn-success"
				));
			echo '</li>';
		echo '</ul>';

		echo '<div class="well">';

		echo '<fieldset><legend>Add ' . $this->config['single'] . '</legend>';

		$this->form->show();

		echo '</fieldset></form></div>';
	}

	public function editForm()
	{

		echo '<form method="post" autocomplete="off" enctype="multipart/form-data">';
		echo $this->view->getContent();

		echo '<ul class="pager toolbar">';
			echo '<li class="previous pull-left">';
				echo $this->tag->linkTo(array(
					array('for' => 'hyperform-search'),
					"&larr; Go Back",
					"class" => "btn btn-sm btn-default"
				));
			echo '</li>';
			echo '<li class="pull-right">';
				echo $this->tag->submitButton(array(
					"Update",
					"class" => "btn btn-sm btn-success"
				));
			echo '</li>';
		echo '</ul>';

		echo '<div class="well">';

		echo '<fieldset><legend>Edit ' . $this->config['single'] . '</legend>';

		$this->form->show();

		echo '</fieldset></form></div>';
	}

	public static function importForm($di, $form, $config)
	{

		echo '<form method="post" autocomplete="off" enctype="multipart/form-data">';
		echo $di['view']->getContent();

		echo '<div align="left">';
			 echo '<table width="100%">';
					echo '<tr>';
						echo '<td valign="top">';
						echo '<h4>Importar ', self::$_config['plural'], '</h4>';
						echo '<div class="import well">', $di['tag']->fileField('archivo'), '</div>';
						echo '</td>';
						echo '<td width="20%" valign="top" align="center">';
							echo $di['tag']->submitButton(array("Importar", "class" => "btn btn-success"));
							echo '<div align="center" class="cancel">';
							echo $di['tag']->linkTo(array(self::$_config['controller'], "Cancelar", "class" => "btn btn-small"));
							echo '</div>';
						echo '</td>';
					echo '</tr>';
			echo '</table>';
		echo '</div>';
		echo '</form>';

		echo '<div align="left">';
		echo '<p>Por favor importe un archivo de Microsoft Excel de máximo 4000 registros con las siguientes columnas:</p>

		<table class="table table-bordered table-striped table-condensed" align="center"><tr><th>Nombre</th><th>Tipo</th><th>Requerido</th><th>Descripción</th>';
		foreach ($form->getElements() as $element) {

			$required = false;
			$validators = $element->getValidators();
			if (count($validators)) {
				foreach ($validators as $validator) {
					if ($validator instanceof PresenceOf) {
						$required = true;
						break;
					}
				}
			}

			if ($element instanceof Select) {

				$domain = array();
				foreach ($element->getOptions() as $key => $value) {
					if (is_object($value)) {
						$domain[] = $value->name;
					} else {
						if ($key) {
							$domain[] = $value;
						}
					}
				}

				echo '<tr>
					<td>', $element->getLabel(), '</td>
					<td>List</td>
					<td>', $required ? 'YES' : 'NO', '</td>
					<td>Allowed values:' . join(', ', $domain) . '</td>
				</tr>';
			} else {

				$maxlength = $element->getAttribute('maxlength');
				if (!$maxlength) {
					$maxlength = '200';
				}

				echo '<tr>
					<td>', $element->getLabel(), '</td>
					<td>Text</td>
					<td>', $required ? 'YES' : 'NO', '</td>
					<td>Maximum Length: ' . $maxlength . '</td>
				</tr>';
			}
		}
		echo '</table></div>';

		echo '<div align="center" class="well" style="padding-bottom:10px">';
		echo '<p>Base template for Excel importation ' . $this->tag->linkTo(array(self::$_config['controller'] . '/download', "Descargar", "class" => "btn btn-primary btn-small")) . '</p>';
		echo '</div>';
	}

	public function rcsForm()
	{

		$metaData = $this->record->getModelsMetaData();
		$columnMap = $metaData->getColumnMap($this->record);

		echo $this->view->getContent();

		echo '<ul class="pager toolbar">';
		echo '<li class="previous pull-left">';
		echo $this->tag->linkTo(array($this->config['controller'], "&larr; Go Back"));
		echo '</li>';
		echo '</ul>';

		foreach ($this->revisions as $row) {

			$revision = Revisions::findFirst($row->id);
			if (!$revision) {
				continue;
			}

			echo '<table width="100%">';
			echo '<tr><td valign="top" width="40%">';
			echo '<table cellpadding="5">';
			echo '<tr><td align="right">User</td><td><strong>', $revision->user->name, '</strong></td></tr>';
			echo '<tr><td align="right">Date</td><td><strong>', date('r', $revision->createdAt), '</strong></td></tr>';
			echo '</table>';
			echo '</td><td width="60%" valign="top">';
			echo '<table cellpadding="5" class="rcs table table-bordered table-striped" width="100%">';
			foreach ($revision->records as $record) {

				if (isset($columnMap[$record->fieldName])) {
					$attributeName = $columnMap[$record->fieldName];
				} else {
					$attributeName = $record->fieldName;
				}

				if ($this->form->has($attributeName)) {

					$element = $this->form->get($attributeName);

					/** Process select element options */
					if ($element instanceof Select) {
						if (!isset($options[$element->getName()])) {
							$elementOptions = array();
							$using = $element->getAttribute('using');
							foreach ($element->getOptions() as $option) {
								if (is_object($option)) {
									$elementOptions[$option->readAttribute($using[0])] = $option->readAttribute($using[1]);
								}
							}
							$options[$element->getName()] = $elementOptions;
						}
					}

					$value = $record->value;
					if ($element instanceof Select) {
						if (isset($options[$element->getName()][$value])) {
							$textValue = $options[$element->getName()][$value];
						} else {
							$textValue = $value;
						}
					} else {
						$textValue = $value;
					}

					if ($record->changed == 'Y') {
						echo '<tr class="success"><td align="right" width="40%">', $element->getLabel(), '</td><td width="60%" title="', $value, '">', $this->escaper->escapeHtml($textValue), '</td></tr>';
					} else {
						echo '<tr><td align="right" width="40%">', $element->getLabel(), '</td><td width="60%" title="', $value, '">', $this->escaper->escapeHtml($textValue), '</td></tr>';
					}
				}
			}
			echo '</table>';
			echo '</td></tr><tr><br><tr>';
			echo '</table>';
		}

	}

}